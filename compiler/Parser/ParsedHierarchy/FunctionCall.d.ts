import { Container as RuntimeContainer } from "../../../engine/Container";
import { Divert } from "./Divert/Divert";
import { Divert as RuntimeDivert } from "../../../engine/Divert";
import { Expression } from "./Expression/Expression";
import { Story } from "./Story";
import { Identifier } from "./Identifier";
export declare class FunctionCall extends Expression {
    static readonly IsBuiltIn: (name: string) => boolean;
    private _proxyDivert;
    get proxyDivert(): Divert;
    private _divertTargetToCount;
    private _variableReferenceToCount;
    get name(): string;
    get args(): Expression[];
    get runtimeDivert(): RuntimeDivert;
    get isChoiceCount(): boolean;
    get isTurns(): boolean;
    get isTurnsSince(): boolean;
    get isRandom(): boolean;
    get isSeedRandom(): boolean;
    get isListRange(): boolean;
    get isListRandom(): boolean;
    get isReadCount(): boolean;
    shouldPopReturnedValue: boolean;
    constructor(functionName: Identifier, args: Expression[]);
    get typeName(): string;
    readonly GenerateIntoContainer: (container: RuntimeContainer) => void;
    ResolveReferences(context: Story): void;
    readonly toString: () => string;
}
