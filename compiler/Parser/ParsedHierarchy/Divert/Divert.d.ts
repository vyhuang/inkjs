import { Container as RuntimeContainer } from "../../../../engine/Container";
import { ControlCommand as RuntimeControlCommand } from "../../../../engine/ControlCommand";
import { Divert as RuntimeDivert } from "../../../../engine/Divert";
import { Expression } from "../Expression/Expression";
import { ParsedObject } from "../Object";
import { Path } from "../Path";
import { Story } from "../Story";
export declare class Divert extends ParsedObject {
    readonly args: Expression[];
    readonly target: Path | null;
    targetContent: ParsedObject | null;
    private _runtimeDivert;
    get runtimeDivert(): RuntimeDivert;
    set runtimeDivert(value: RuntimeDivert);
    isFunctionCall: boolean;
    isEmpty: boolean;
    isTunnel: boolean;
    isThread: boolean;
    get isEnd(): boolean;
    get isDone(): boolean;
    constructor(target?: Path | null | undefined, args?: Expression[]);
    get typeName(): string;
    readonly GenerateRuntimeObject: () => RuntimeContainer | RuntimeControlCommand | RuntimeDivert;
    readonly PathAsVariableName: () => string | null;
    readonly ResolveTargetContent: () => void;
    ResolveReferences(context: Story): void;
    readonly CheckArgumentValidity: () => void;
    readonly CheckExternalArgumentValidity: (context: Story) => void;
    Error(message: string, source?: ParsedObject | null, isWarning?: boolean): void;
    toString: () => string;
}
