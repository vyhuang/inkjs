import { CompilerOptions } from "./CompilerOptions";
import { DebugSourceRange } from "./DebugSourceRange";
import { ErrorType } from "./Parser/ErrorType";
import { InkParser } from "./Parser/InkParser";
import { Story } from "../engine/Story";
import { Story as ParsedStory } from "./Parser/ParsedHierarchy/Story";
import { DebugMetadata } from "../engine/DebugMetadata";
import { Stats } from "./Stats";
export { CompilerOptions } from "./CompilerOptions";
export { InkParser } from "./Parser/InkParser";
export { StatementLevel } from "./Parser/StatementLevel";
export { JsonFileHandler } from "./FileHandler/JsonFileHandler";
export { InkList, Story } from "../engine/Story";
export declare class Compiler {
    private _errors;
    get errors(): string[];
    private _warnings;
    get warnings(): string[];
    private _authorMessages;
    get authorMessages(): string[];
    private _inputString;
    get inputString(): string;
    private _options;
    get options(): CompilerOptions;
    private _parsedStory;
    get parsedStory(): ParsedStory;
    private _runtimeStory;
    get runtimeStory(): Story;
    private _parser;
    get parser(): InkParser;
    private _debugSourceRanges;
    get debugSourceRanges(): DebugSourceRange[];
    constructor(inkSource: string, options?: CompilerOptions | null);
    readonly Compile: () => Story;
    readonly RetrieveDebugSourceForLatestContent: () => void;
    readonly GenerateStats: () => Stats | null;
    readonly DebugMetadataForContentAtOffset: (offset: number) => DebugMetadata | null;
    readonly OnError: (message: string, errorType: ErrorType) => void;
}
